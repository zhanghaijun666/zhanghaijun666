import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-efa5e96e.js";const e={},p=t(`<h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h2><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3><blockquote><p>公司提供了一套通用的JAVA基础组件包，希望可以通过promethus来监控现在公司内使用各版本代码库的比例，以及各版本代码库的使用情况。<br> 这有利于我们做版本兼容，必要的时候可以对古早版本使用者溯源。</p></blockquote><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><blockquote><p>需求似乎很简单，但真要获取自身的jar版本号还是挺麻烦的，有个比较简单但阴间的办法，就是给每一个组件都加上当前的jar版本号，写到配置文件里或者直接设置成常量，这样上报promethus时就可以直接获取到jar包版本号了，这个方法虽然可以解决问题，但每次迭代版本都要跟着改一遍所有组件包的版本号数据，过于麻烦。</p><p>有没有更好的解决办法呢？比如我们可不可以在gradle打包构建时拿到jar包的版本号，然后注入到每个组件中去呢？就像lombok那样，不需要写get、set方法，只需要加个注解标记就可以自动注入get、set方法。</p></blockquote><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><blockquote><p>定义插入式注解处理器（通过JSR-269提案定义的Pluggable Annotation Processing API实现）</p><p>编译过程：源码-词法分析器-token流-语法分析器-抽象语法树-语义分析器-解语法糖-字节码生成器-jvm字节码</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 一个空常量，加上自定义的注解</span>
<span class="token annotation punctuation">@TrisceliVersion</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java中解析一个注解的方式主要有两种：编译期扫描、运行期反</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span> <span class="token comment">//只在编译期有效，最终不会打进class文件中</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//仅允许作用于类属性之上</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TrisceliVersion</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractProcessor</span></span><span class="token punctuation">}</span> 就属于 Pluggable Annotation Processing API
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrisceliVersionProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProcessor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">JavacTrees</span> javacTrees<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">TreeMaker</span> treeMaker<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ProcessingEnvironment</span> processingEnv<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 初始化处理器
     *
     * <span class="token keyword">@param</span> <span class="token parameter">processingEnv</span> 提供了一系列的实用工具
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ProcessingEnvironment</span> processingEnv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>processingEnv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>processingEnv <span class="token operator">=</span> processingEnv<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>javacTrees <span class="token operator">=</span> <span class="token class-name">JavacTrees</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span>processingEnv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JavacProcessingEnvironment</span><span class="token punctuation">)</span> processingEnv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>treeMaker <span class="token operator">=</span> <span class="token class-name">TreeMaker</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SourceVersion</span> <span class="token function">getSupportedSourceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">SourceVersion</span><span class="token punctuation">.</span><span class="token function">latest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSupportedAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">TrisceliVersion</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 支持解析的注解</span>
        <span class="token keyword">return</span> set<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token punctuation">&gt;</span></span> annotations<span class="token punctuation">,</span> <span class="token class-name">RoundEnvironment</span> roundEnv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TypeElement</span> t <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> e <span class="token operator">:</span> roundEnv<span class="token punctuation">.</span><span class="token function">getElementsAnnotatedWith</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取到给定注解的element（element可以是一个类、方法、包等）</span>
                <span class="token comment">// JCVariableDecl为字段/变量定义语法树节点</span>
                <span class="token class-name">JCTree<span class="token punctuation">.</span>JCVariableDecl</span> jcv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JCTree<span class="token punctuation">.</span>JCVariableDecl</span><span class="token punctuation">)</span> javacTrees<span class="token punctuation">.</span><span class="token function">getTree</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> varType <span class="token operator">=</span> jcv<span class="token punctuation">.</span>vartype<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>varType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 限定变量类型必须是String类型，否则抛异常</span>
                    <span class="token function">printErrorMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">&quot;Type &#39;&quot;</span> <span class="token operator">+</span> varType <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">+</span> <span class="token string">&quot; is not support.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                jcv<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">treeMaker<span class="token punctuation">.</span></span>Literal</span><span class="token punctuation">(</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 给这个字段赋值，也就是getVersion的返回值</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 利用processingEnv内的Messager对象输出一些日志
     *
     * <span class="token keyword">@param</span> <span class="token parameter">e</span> element
     * <span class="token keyword">@param</span> <span class="token parameter">m</span> error message
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printErrorMessage</span><span class="token punctuation">(</span><span class="token class-name">Element</span> e<span class="token punctuation">,</span> <span class="token class-name">String</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        processingEnv<span class="token punctuation">.</span><span class="token function">getMessager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token class-name">Diagnostic<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 获取version，这里省略掉复杂的代码，直接返回固定值
         */</span>
        <span class="token keyword">return</span> <span class="token string">&quot;v1.0.1&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>定义好的处理器需要SPI机制被发现，所以需要定义META.services：</p></blockquote>`,11),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","31.插入式注解.html.vue"]]);export{k as default};
