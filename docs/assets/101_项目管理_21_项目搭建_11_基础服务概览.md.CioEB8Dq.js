import{_ as o,C as s,c as h,o as d,j as i,G as e,a5 as t,a as l}from"./chunks/framework.CBqkjkG0.js";const C=JSON.parse('{"title":"服务总览","description":"","frontmatter":{},"headers":[],"relativePath":"101_项目管理/21_项目搭建/11_基础服务概览.md","filePath":"101_项目管理/21_项目搭建/11_基础服务概览.md","lastUpdated":1739184584000}'),E={name:"101_项目管理/21_项目搭建/11_基础服务概览.md"};function A(u,a,B,g,k,c){const n=s("ArticleMetadata"),r=s("Mermaid");return d(),h("div",null,[a[0]||(a[0]=i("h1",{id:"服务总览",tabindex:"-1"},[l("服务总览 "),i("a",{class:"header-anchor",href:"#服务总览","aria-label":'Permalink to "服务总览"'},"​")],-1)),e(n),a[1]||(a[1]=t('<ul><li>用户管理</li><li>部门管理</li><li>权限管理</li><li>角色管理</li><li>字典管理</li><li>操作日志</li><li>登录认证</li><li>文件管理</li><li>消息通知</li><li>代码生成</li><li>定时任务</li><li>接口文档</li><li>监控管理</li><li>链路追踪</li><li>性能监控</li></ul><p>在构建和优化 Java 服务时，基础服务的规范和梳理至关重要。本文档将从服务架构、基础服务、中间件及组件、安全机制、监控与告警、测试与部署等方面进行说明，以确保系统的稳定性、可维护性和扩展性。</p><h2 id="_1-服务架构" tabindex="-1">1. 服务架构 <a class="header-anchor" href="#_1-服务架构" aria-label="Permalink to &quot;1. 服务架构&quot;">​</a></h2><h3 id="分层设计" tabindex="-1">分层设计 <a class="header-anchor" href="#分层设计" aria-label="Permalink to &quot;分层设计&quot;">​</a></h3><p>常见分层包括：</p><ul><li><strong>Controller 层</strong>：处理请求和响应，负责与前端交互。</li><li><strong>Service 层</strong>：包含业务逻辑，确保业务流程的处理。</li><li><strong>DAO 层</strong>：与数据库交互，封装数据访问细节。</li></ul>',6)),e(r,{id:"mermaid-109",code:"graph%20LR%0A%20%20A%5B%E8%AF%B7%E6%B1%82%5D%20--%3E%7C%E8%B0%83%E7%94%A8%7C%20B%5BController%E5%B1%82%5D%0A%20%20B%20--%3E%7C%E8%B0%83%E7%94%A8%7C%20C%5BService%E5%B1%82%5D%0A%20%20C%20--%3E%7C%E8%AE%BF%E9%97%AE%7C%20D%5BDAO%E5%B1%82%5D%0A%20%20D%20--%3E%7C%E6%9F%A5%E8%AF%A2%7C%20E%5B(%E6%95%B0%E6%8D%AE%E5%BA%93)%5D%0A%20%20style%20A%20fill%3A%20%23f9f%2C%20stroke%3A%20%23333%2C%20stroke-width%3A%202px%3B%0A"}),a[2]||(a[2]=t('<h3 id="接口规范化" tabindex="-1">接口规范化 <a class="header-anchor" href="#接口规范化" aria-label="Permalink to &quot;接口规范化&quot;">​</a></h3><ul><li><strong>API 设计</strong>：统一接口风格，遵循 RESTFUL 标准，保持接口简单、清晰，易于扩展。</li><li><strong>版本控制</strong>：对 API 进行版本管理，确保向后兼容。</li></ul><h3 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h3><p>将基础服务按功能模块划分，常见模块包括：</p><ul><li>用户管理</li><li>权限管理</li><li>日志系统</li><li>文件管理</li></ul><h2 id="_2-基础服务" tabindex="-1">2. 基础服务 <a class="header-anchor" href="#_2-基础服务" aria-label="Permalink to &quot;2. 基础服务&quot;">​</a></h2><h3 id="用户认证" tabindex="-1">用户认证 <a class="header-anchor" href="#用户认证" aria-label="Permalink to &quot;用户认证&quot;">​</a></h3><ul><li><strong>功能</strong>：实现用户的增删改查，支持用户认证与授权。</li><li><strong>技术</strong>：通常结合 Spring Security、JWT 等框架进行安全管理。</li></ul>',8)),e(r,{id:"mermaid-171",code:"graph%20LR%0A%20%20A%5B%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%5D%20--%3E%7C%E5%8F%91%E9%80%81%E8%AE%A4%E8%AF%81%E8%AF%B7%E6%B1%82%7C%20B%5B%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1%5D%0A%20%20B%20--%3E%7C%E9%AA%8C%E8%AF%81%E8%BA%AB%E4%BB%BD%7C%20C%5B%E6%95%B0%E6%8D%AE%E5%BA%93%5D%0A%20%20B%20--%3E%7C%E7%94%9F%E6%88%90Token%7C%20D%5BJWT%5D%0A%20%20D%20--%3E%7C%E8%BF%94%E5%9B%9EToken%7C%20A%0A"}),a[3]||(a[3]=i("h3",{id:"权限管理",tabindex:"-1"},[l("权限管理 "),i("a",{class:"header-anchor",href:"#权限管理","aria-label":'Permalink to "权限管理"'},"​")],-1)),a[4]||(a[4]=i("ul",null,[i("li",null,[i("strong",null,"功能"),l("：实现细粒度的权限控制，涵盖菜单、按钮、接口权限等。")]),i("li",null,[i("strong",null,"技术"),l("：可基于 RBAC（角色权限控制）或 ABAC（属性权限控制）模型实现。")])],-1)),e(r,{id:"mermaid-187",code:"graph%20LR%0A%20%20A%5B%E7%94%A8%E6%88%B7%5D%20--%3E%7C%E8%AF%B7%E6%B1%82%E8%B5%84%E6%BA%90%7C%20B%5B%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%5D%0A%20%20B%20--%3E%7C%E6%A3%80%E6%9F%A5%E6%9D%83%E9%99%90%7C%20C%5BRBAC%2FABAC%5D%0A%20%20C%20--%3E%7C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%7C%20B%0A%20%20B%20--%3E%7C%E5%85%81%E8%AE%B8%2F%E6%8B%92%E7%BB%9D%7C%20A%0A"}),a[5]||(a[5]=t('<h3 id="日志管理" tabindex="-1">日志管理 <a class="header-anchor" href="#日志管理" aria-label="Permalink to &quot;日志管理&quot;">​</a></h3><ul><li><strong>功能</strong>：记录关键操作和系统日志，用于后期审计和问题排查。</li><li><strong>技术</strong>：通过 AOP（面向切面编程）实现统一的操作日志管理。</li></ul><h3 id="任务调度" tabindex="-1">任务调度 <a class="header-anchor" href="#任务调度" aria-label="Permalink to &quot;任务调度&quot;">​</a></h3><ul><li><strong>功能</strong>：处理定时任务，如数据清理、报表生成等。</li><li><strong>技术</strong>：使用 <code>Spring Task</code> 或 <code>Quartz</code> 实现定时任务调度。</li></ul><h3 id="文件管理" tabindex="-1">文件管理 <a class="header-anchor" href="#文件管理" aria-label="Permalink to &quot;文件管理&quot;">​</a></h3><ul><li><strong>功能</strong>：提供文件上传、下载及存储服务。</li><li><strong>技术</strong>：可结合云存储（如阿里云 OSS、亚马逊 S3）或本地存储实现。</li></ul><h2 id="_3-中间件及组件" tabindex="-1">3. 中间件及组件 <a class="header-anchor" href="#_3-中间件及组件" aria-label="Permalink to &quot;3. 中间件及组件&quot;">​</a></h2><h3 id="缓存服务" tabindex="-1">缓存服务 <a class="header-anchor" href="#缓存服务" aria-label="Permalink to &quot;缓存服务&quot;">​</a></h3><ul><li><strong>功能</strong>：通过缓存提升查询效率，减轻数据库压力。</li><li><strong>技术</strong>：采用 Caffeine 实现本地缓存，Redis 实现分布式缓存。</li></ul>',9)),e(r,{id:"mermaid-251",code:"graph%20LR%0A%20%20A%5B%E6%9F%A5%E8%AF%A2%E8%AF%B7%E6%B1%82%5D%20--%3E%7C%E6%9F%A5%E6%89%BE%E7%BC%93%E5%AD%98%7C%20B%5B%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98Caffeine%5D%0A%20%20B%20--%3E%7C%E6%9C%AA%E5%91%BD%E4%B8%AD%7C%20C%5B%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98Redis%5D%0A%20%20C%20--%3E%7C%E6%9C%AA%E5%91%BD%E4%B8%AD%7C%20D%5B%E6%95%B0%E6%8D%AE%E5%BA%93%5D%0A%20%20D%20--%3E%7C%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%7C%20C%0A%20%20C%20--%3E%7C%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%7C%20B%0A%20%20B%20--%3E%7C%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%7C%20A%0A"}),a[6]||(a[6]=i("h3",{id:"消息队列",tabindex:"-1"},[l("消息队列 "),i("a",{class:"header-anchor",href:"#消息队列","aria-label":'Permalink to "消息队列"'},"​")],-1)),a[7]||(a[7]=i("ul",null,[i("li",null,[i("strong",null,"功能"),l("：支持异步通信，处理高并发请求，解耦服务之间的依赖。")]),i("li",null,[i("strong",null,"技术"),l("：常用 RabbitMQ、Kafka 等实现消息队列。")])],-1)),e(r,{id:"mermaid-267",code:"graph%20LR%0A%20%20A%5B%E7%94%9F%E4%BA%A7%E8%80%85%5D%20--%3E%7C%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%7C%20B%5B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%20RabbitMQ%2FKafka%5D%0A%20%20B%20--%3E%7C%E5%88%86%E5%8F%91%E6%B6%88%E6%81%AF%7C%20C%5B%E6%B6%88%E8%B4%B9%E8%80%85%5D%0A"}),a[8]||(a[8]=t(`<h3 id="数据库连接池" tabindex="-1">数据库连接池 <a class="header-anchor" href="#数据库连接池" aria-label="Permalink to &quot;数据库连接池&quot;">​</a></h3><ul><li><strong>功能</strong>：管理数据库连接，提高数据库访问性能。</li><li><strong>技术</strong>：HikariCP、Druid 是常用的数据库连接池方案。</li></ul><h2 id="_4-配置管理" tabindex="-1">4. 配置管理 <a class="header-anchor" href="#_4-配置管理" aria-label="Permalink to &quot;4. 配置管理&quot;">​</a></h2><h3 id="集中化配置" tabindex="-1">集中化配置 <a class="header-anchor" href="#集中化配置" aria-label="Permalink to &quot;集中化配置&quot;">​</a></h3><ul><li><strong>功能</strong>：实现配置的集中管理，支持动态更新。</li><li><strong>技术</strong>：可以使用 Spring Cloud Config、Nacos 等工具。</li></ul><h3 id="环境区分" tabindex="-1">环境区分 <a class="header-anchor" href="#环境区分" aria-label="Permalink to &quot;环境区分&quot;">​</a></h3><ul><li><strong>功能</strong>：区分开发、测试、生产环境的配置，确保不同环境下的配置合理性。</li><li><strong>技术</strong>：通过 Spring Profiles 进行环境配置管理。</li></ul><h2 id="_5-安全机制" tabindex="-1">5. 安全机制 <a class="header-anchor" href="#_5-安全机制" aria-label="Permalink to &quot;5. 安全机制&quot;">​</a></h2><h3 id="认证与授权" tabindex="-1">认证与授权 <a class="header-anchor" href="#认证与授权" aria-label="Permalink to &quot;认证与授权&quot;">​</a></h3><ul><li><strong>功能</strong>：实现用户身份认证与权限控制。</li><li><strong>技术</strong>：使用 Spring Security 结合 JWT 或 OAuth2 实现。</li></ul><h3 id="输入校验与安全防护" tabindex="-1">输入校验与安全防护 <a class="header-anchor" href="#输入校验与安全防护" aria-label="Permalink to &quot;输入校验与安全防护&quot;">​</a></h3><ul><li><strong>功能</strong>：防止常见的安全漏洞如 SQL 注入、XSS 攻击等。</li><li><strong>技术</strong>：通过参数校验框架（如 Hibernate Validator）进行输入校验。</li></ul><h3 id="加密与解密" tabindex="-1">加密与解密 <a class="header-anchor" href="#加密与解密" aria-label="Permalink to &quot;加密与解密&quot;">​</a></h3><ul><li><strong>功能</strong>：对敏感数据进行加密，确保数据传输和存储的安全性。</li><li><strong>技术</strong>：使用如 AES、RSA 等加密算法。</li></ul><h2 id="_6-监控与告警" tabindex="-1">6. 监控与告警 <a class="header-anchor" href="#_6-监控与告警" aria-label="Permalink to &quot;6. 监控与告警&quot;">​</a></h2><h3 id="应用监控" tabindex="-1">应用监控 <a class="header-anchor" href="#应用监控" aria-label="Permalink to &quot;应用监控&quot;">​</a></h3><ul><li><strong>功能</strong>：监控服务运行状态，追踪性能指标。</li><li><strong>技术</strong>：结合 Prometheus、Grafana 进行监控和展示。</li></ul><h3 id="日志收集与分析" tabindex="-1">日志收集与分析 <a class="header-anchor" href="#日志收集与分析" aria-label="Permalink to &quot;日志收集与分析&quot;">​</a></h3><ul><li><strong>功能</strong>：统一收集、存储和分析系统日志。</li><li><strong>技术</strong>：使用 ELK（Elasticsearch、Logstash、Kibana）或其他日志管理系统。</li></ul><h3 id="健康检查与告警" tabindex="-1">健康检查与告警 <a class="header-anchor" href="#健康检查与告警" aria-label="Permalink to &quot;健康检查与告警&quot;">​</a></h3><ul><li><strong>功能</strong>：提供系统健康检查和故障告警机制。</li><li><strong>技术</strong>：使用 Spring Boot Actuator 进行健康检查，并结合 Prometheus 实现告警规则。</li></ul><h2 id="_7-测试与部署" tabindex="-1">7. 测试与部署 <a class="header-anchor" href="#_7-测试与部署" aria-label="Permalink to &quot;7. 测试与部署&quot;">​</a></h2><h3 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h3><ul><li><strong>功能</strong>：通过单元测试确保各模块功能的正确性。</li><li><strong>技术</strong>：采用 JUnit、TestNG 进行自动化测试。</li></ul><h3 id="集成测试" tabindex="-1">集成测试 <a class="header-anchor" href="#集成测试" aria-label="Permalink to &quot;集成测试&quot;">​</a></h3><ul><li><strong>功能</strong>：通过集成测试验证模块间协作的正确性。</li><li><strong>技术</strong>：结合 Mock 框架（如 Mockito、WireMock）进行集成测试。</li></ul><h3 id="持续集成与部署" tabindex="-1">持续集成与部署 <a class="header-anchor" href="#持续集成与部署" aria-label="Permalink to &quot;持续集成与部署&quot;">​</a></h3><ul><li><strong>功能</strong>：通过 CI/CD 管道实现自动化构建、测试和部署。</li><li><strong>技术</strong>：Jenkins、GitLab CI 等工具可以实现持续集成和自动化部署。</li></ul><h2 id="maven-依赖" tabindex="-1">maven 依赖 <a class="header-anchor" href="#maven-依赖" aria-label="Permalink to &quot;maven 依赖&quot;">​</a></h2><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 想要查看maven的依赖树的时候使用Maven命令来查看依赖：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maven</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dependency:tree</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 查看是否有依赖冲突也可以使用Maven命令来查看：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dependency:tree</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dverbose</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dincludes=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,30))])}const b=o(E,[["render",A]]);export{C as __pageData,b as default};
